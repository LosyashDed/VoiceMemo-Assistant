Концепция Telegram-бота "VoiceMemo Assistant" (Голосовой Ассистент-Суммаризатор)
I. Миссия и Основная Идея
"VoiceMemo Assistant" – это персональный ассистент в Telegram, предназначенный для эффективной работы с голосовыми сообщениями. Его главная задача – превращать спонтанные голосовые заметки, идеи или пересланные сообщения в структурированную, краткую и легко управляемую информацию. Бот позволяет пользователю "наговаривать" мысли в течение дня, а затем получать их текстовую расшифровку, интеллектуальное резюме и возможность дальнейшего редактирования или аннотирования этих записей.
II. Целевая аудитория
Люди, которые часто используют голосовые сообщения для фиксации идей, задач, мыслей на ходу.
Пользователи, которым необходимо быстро извлекать суть из длинных голосовых сообщений (своих или чужих).
Те, кто хочет вести своего рода "аудио-дневник" с возможностью последующего анализа и структуризации информации.
III. Ключевые Функции
Прием и обработка голосовых сообщений (ГС):
Запись/Пересылка ГС: Пользователь может записать новое ГС прямо в чат с ботом или переслать существующее.
Транскрипция: Бот автоматически переводит аудио из ГС в текст с использованием модели Vosk.
Резюмирование (Суммаризация): Полученный текст отправляется LLM (локальной Ollama или облачной OpenAI) для генерации краткого резюме. Длина резюме адаптируется под длину исходного текста, с возможностью нескольких попыток для достижения оптимального результата.
Уникальная Идентификация: Каждой обработанной паре (оригинальный текст + резюме) присваивается уникальный ID из базы данных (например, 123).
Отправка результата пользователю: Бот отправляет пользователю сообщение, содержащее:
Уникальный ID записи в формате #ID (например, #123).
Текст резюме, отформатированный моноширинным шрифтом (для удобства копирования и редактирования).


Сохранение в Базу Данных (БД): Вся информация (ID из Telegram, транскрибированный текст, резюме, ID записи, время отправки, информация о пользователе) сохраняется в БД.
Интерактивное Редактирование и Аннотирование Резюме:
Инициирование редактирования: Пользователь отвечает (reply) на сообщение бота с резюме (то, что содержит #ID и моноширинный текст), присылая свой отредактированный вариант текста.
Диалог с ботом (машина состояний):
Получив ответ на свое сообщение с резюме, бот переходит в состояние ожидания выбора действия.
Бот отправляет пользователю сообщение с двумя inline-кнопками: "Изменить резюме" и "Добавить примечание".
"Изменить резюме": Если пользователь нажимает эту кнопку, бот заменяет существующий текст резюме в БД (для соответствующего #ID) на текст, присланный пользователем.
"Добавить примечание": Если пользователь нажимает эту кнопку, бот сохраняет текст, присланный пользователем, в новое специальное поле "Примечание" (note) в БД (для соответствующего #ID). Существующее резюме при этом не изменяется.
Выход из состояния: Если пользователь отправляет любую другую команду или новое ГС до выбора опции, диалог редактирования прерывается, и бот возвращается в обычный режим работы.
Получение Сводок (/sum):
Команда: /sum [YYYY-MM-DD]
Функционал:
Если дата не указана, используется текущая дата (по часовому поясу Warsaw/Europe, как в текущей реализации, или настраиваемо).
Бот извлекает из БД все записи (резюме и примечания) за указанную дату.
Отправляет пользователю сводку в формате:
ГГГГ-ММ-ДД ЧЧ:ММ:СС — #ID: Текст резюме
Если к записи есть примечание, оно добавляется:
ГГГГ-ММ-ДД ЧЧ:ММ:СС — #ID: Текст резюме
 └ Примечание: Текст примечания
(Формат вывода примечания можно уточнить, например, сделать его менее навязчивым или наоборот, выделить).
Удаление Записей (/delete):
Способы вызова:
По ID: Пользователь отправляет команду /delete #ID (или /delete ID). Бот удаляет запись с указанным ID из БД.
Ответом на ГС: Пользователь отвечает командой /delete на свое исходное голосовое сообщение, которое он ранее отправлял боту. Бот находит соответствующую запись в БД по telegram_file_id и удаляет ее.
Ответом на резюме: Пользователь отвечает командой /delete на сообщение бота с резюме (которое содержит #ID). Бот извлекает #ID из сообщения и удаляет соответствующую запись из БД.
Подтверждение: (Опционально, но рекомендуется) Бот может запрашивать подтверждение перед удалением.
Настройки Пользователя (Потенциальное развитие):
"Продвинутый" / "Обычный" режим: Как вы упомянули, возможно в будущем добавить переключение режимов, которое может влиять на детализацию резюме, доступные команды или другие аспекты работы бота. (Например, в продвинутом режиме может быть больше опций для LLM).
IV. Архитектура и Технологии
Язык программирования: Python.
Telegram Bot Framework: python-telegram-bot (текущая). Для реализации машины состояний (редактирование резюме) будет использоваться ConversationHandler. Если его возможностей окажется недостаточно, можно рассмотреть переход на aiogram.
База Данных: SQLite (текущая), с возможностью миграции на MySQL.
Структура таблицы voice_messages (дополненная):
id: INTEGER PRIMARY KEY AUTOINCREMENT (Уникальный ID записи, используется как #ID)
telegram_file_id: TEXT UNIQUE NOT NULL (ID файла ГС в Telegram)
text: TEXT (Полная транскрипция ГС)
summarized: TEXT (Текст резюме, сгенерированный LLM или измененный пользователем)
note: TEXT (Опциональное примечание от пользователя к резюме)
sent_at: TEXT (Время получения/обработки ГС, в UTC ISO-8601)
user_id: INTEGER (ID пользователя в Telegram)
username: TEXT (Username пользователя в Telegram)
Speech-to-Text (STT): Vosk (текущая). Модульная структура SpeechToText позволяет заменить на другую систему при необходимости.
Large Language Model (LLM):
Локальная: Ollama (Mistral и др.).
Облачная: OpenAI (GPT-3.5-turbo, GPT-4o и др.).
Выбор через переменные окружения.
Конфигурация: Через файл .env.
Модульная структура кода:
Utils: Вспомогательные утилиты.
Database: Слой для работы с БД.
LLMHandler: Обработчик запросов к LLM.
SpeechToText: Модуль транскрипции.
TelegramBot: Основная логика бота, обработчики команд и сообщений.
V. Особенности и Преимущества
Полный цикл обработки ГС: От аудио до редактируемого резюме и структурированного хранения.
Гибкость выбора LLM: Поддержка как локальных, так и облачных моделей ИИ.
Интерактивность: Пользователь не просто получает результат, но и может активно влиять на него (редактировать, добавлять примечания).
Уникальная идентификация и управление: #ID позволяет легко ссылаться на записи, удалять и модифицировать их.
Персонализация: Бот работает как личный помощник, сохраняя данные для конкретного пользователя.
Модульность и расширяемость: Архитектура позволяет легко добавлять новые функции или заменять компоненты (например, STT или LLM-провайдера).
VI. Потенциальные направления развития
Полнотекстовый поиск: Поиск по транскрипциям, резюме и примечаниям.
Тегирование/Категоризация: Возможность присваивать записям теги для лучшей организации.
Экспорт данных: Функция экспорта всех записей пользователя (например, в CSV или JSON).
Более глубокие настройки LLM: Предоставление пользователю возможности влиять на параметры генерации резюме (стиль, длина, температура и т.д.) через настройки.
Пакетная обработка: Возможность переслать боту несколько ГС и получить сводку по ним.
Напоминания: Установка напоминаний на основе содержания ГС.
Эта концепция описывает мощный и гибкий инструмент для работы с голосовой информацией, сочетающий автоматизацию с возможностью пользовательского контроля.


